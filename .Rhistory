generate_mdx_document <- function(document, inputParams = list(), outputFolder = "OutputDocuments", outputPdfFile = NULL) {
inputFile <- paste(here(scriptBaseFolder), "/", document, ".Rmd", sep = "")
outputFile <- ifelse(!is.null(outputPdfFile),
paste(here(scriptBaseFolder), "/", outputFolder, "/", outputPdfFile, ".pdf", sep = ""),
paste(here(scriptBaseFolder), "/", outputFolder, "/", document, ".pdf", sep = "")
)
create_folder_if_not_exists(dirname(outputFile))
tempFile <- knit_mdx(inputFile, inputParams)
if (file.exists(tempFile) && file.exists(outputFile)) {
file.remove(outputFile)
}
file.rename(tempFile, outputFile)
print(paste("Created", outputFile))
}
generateOSPReports <- function() {
reportAllParams <- list(
Year = year
)
generate_mdx_document("report", reportAllParams, "OutputDocuments/Report", "Report1")
}
generateOSPReports()
library(here)
#ource(here("common/helpers.R"))
#source(here("common/reportHelpers2024.R"))
scriptBaseFolder <- "bucuresti"
year <- 2024
create_folder_if_not_exists <- function(folderPath) {
if (!dir.exists(folderPath)) {
dir.create(folderPath, recursive = TRUE)
}
}
mdx_to_pdf <- function(knitted, outputFile) {
body <- readr::read_file(knitted)
httr::POST(
#url = "https://jeroenkpi.ahemen.nl/mdx?test=true",
url = "http://localhost:3000/mdx?test=true",
body = body,
httr::write_disk(
outputFile,
overwrite = TRUE
)
)
file.remove(knitted)
}
knit_mdx <- function(inputFile, inputParams = list()) {
knitted <- rmarkdown::render(inputFile, params = inputParams, run_pandoc = FALSE)
knitted <- paste(dirname(inputFile), "/", knitted, sep = "")
outputFile <- paste(xfun::sans_ext(inputFile), ".pdf", sep = "")
mdx_to_pdf(knitted, outputFile)
outputFile
}
generate_mdx_document <- function(document, inputParams = list(), outputFolder = "OutputDocuments", outputPdfFile = NULL) {
inputFile <- paste(here(scriptBaseFolder), "/", document, ".Rmd", sep = "")
outputFile <- ifelse(!is.null(outputPdfFile),
paste(here(scriptBaseFolder), "/", outputFolder, "/", outputPdfFile, ".pdf", sep = ""),
paste(here(scriptBaseFolder), "/", outputFolder, "/", document, ".pdf", sep = "")
)
create_folder_if_not_exists(dirname(outputFile))
tempFile <- knit_mdx(inputFile, inputParams)
if (file.exists(tempFile) && file.exists(outputFile)) {
file.remove(outputFile)
}
file.rename(tempFile, outputFile)
print(paste("Created", outputFile))
}
generateOSPReports <- function() {
reportAllParams <- list(
Year = year
)
generate_mdx_document("report", reportAllParams, "OutputDocuments/Report", "Report1")
}
generateOSPReports()
View(table4)
library(here)
scriptBaseFolder <- "bucuresti"
table1 <- read.csv(paste0(here(scriptBaseFolder), "/source/table1.csv"), sep = ",")
table4 <- read.csv(paste0(here(scriptBaseFolder), "/source/table4.csv"), sep = ",")
View(table1)
xx<- table1$total
xx <- c(table1$total[2], table1$total[3], table1$total[4])
table4Graph <- subset(table4, select = c(factor, total))
View(table4Graph)
maxtable4 <- max(table4Graph$total)
table4Graph = table4Graph %>%
mutate(percent = total/maxtable4)
View(table4Graph)
table4Graph = table4Graph %>%
mutate(percent = total/maxtable4*100)
View(table4Graph)
library(here)
scriptBaseFolder <- "bucuresti"
table1 <- read.csv(paste0(here(scriptBaseFolder), "/source/table1.csv"), sep = ",")
table2 <- read.csv(paste0(here(scriptBaseFolder), "/source/table2.csv"), sep = ",")
table4 <- read.csv(paste0(here(scriptBaseFolder), "/source/table4.csv"), sep = ",")
#xx <- c(table1$total[2], table1$total[3], table1$total[4])
#pillColors = c(colors[1], colors[2], colors[3])
table4Graph <- subset(table4, select = c(factor, total))
table4MaxGRaphValue <- round(max(table4Graph$total), -3)
table4Graph <- table4Graph %>%
mutate(percent = total/maxtable4*100)
View(table4Graph)
library(here)
scriptBaseFolder <- "bucuresti"
table1 <- read.csv(paste0(here(scriptBaseFolder), "/source/table1.csv"), sep = ",")
table2 <- read.csv(paste0(here(scriptBaseFolder), "/source/table2.csv"), sep = ",")
table4 <- read.csv(paste0(here(scriptBaseFolder), "/source/table4.csv"), sep = ",")
#xx <- c(table1$total[2], table1$total[3], table1$total[4])
#pillColors = c(colors[1], colors[2], colors[3])
table4Graph <- subset(table4, select = c(factor, total))
table4MaxGraphValue <- round(max(table4Graph$total), -3)
table4Graph <- table4Graph %>%
mutate(percent = total/table4MaxGraphValue*100)
View(table4Graph)
n <- 100
# Create the data frame
df <- data.frame(
name = paste0("Name_", 1:n),  # Generating names like Name_1, Name_2, ...
q1 = sample(1:2, n, replace = TRUE),  # Random numbers between 1 and 233
q2 = sample(1:5, n, replace = TRUE),    # Random numbers between 1 and 5
q3 = sample(1:10, n, replace = TRUE)    # Random numbers between 1 and 10
)
View(df)
n <- 100
# Create the data frame
df <- data.frame(
student_id = paste0("Student_", 1:n),
q1 = sample(1:2, n, replace = TRUE),
q2 = sample(1:5, n, replace = TRUE),
q3 = sample(1:10, n, replace = TRUE)
)
# Print the data frame
print(df)
n <- 30
# Create the data frame
df <- data.frame(
student_id = paste0("Student_", 1:n),
q1 = sample(1:2, n, replace = TRUE),
q2 = sample(1:182, n, replace = TRUE),
q3 = sample(1:126, n, replace = TRUE),
q4 = sample(1:13, n, replace = TRUE),
q5 = sample(1:7, n, replace = TRUE),
q6 = sample(1:5, n, replace = TRUE),
q7 = sample(1:5, n, replace = TRUE),
q8 = sample(1:27, n, replace = TRUE),
q9 = sample(1:16, n, replace = TRUE),
q10 = sample(1:14, n, replace = TRUE),
q11 = sample(1:6, n, replace = TRUE),
q12 = sample(1:6, n, replace = TRUE),
q13 = sample(1:6, n, replace = TRUE),
q14 = sample(1:6, n, replace = TRUE),
q15 = sample(1:5, n, replace = TRUE),
q16 = sample(1:5, n, replace = TRUE),
q17 = sample(1:3, n, replace = TRUE),
q18 = sample(1:10, n, replace = TRUE),
q19 = sample(1:7, n, replace = TRUE),
q20 = sample(1:6, n, replace = TRUE),
q21 = sample(1:2, n, replace = TRUE)
)
# Print the data frame
#print(df)
View(df)
df11 <- data.frame(category = sample(1:150, 10, replace = TRUE))
View(df11)
df_transformed <- as.data.frame(model.matrix(~ category - 1, data = df11))
View(df_transformed)
View(df_transformed)
View(df11)
View(df_transformed)
df_transformed <- as.data.frame(model.matrix(~ category - 1, data = df11))
View(df11)
# Sample data frame with a column containing values from 1 to 150
set.seed(123)
df <- data.frame(category = sample(1:150, 10, replace = TRUE))  # A sample column with values from 1 to 150
# Use model.matrix to create a one-hot encoded matrix
df_transformed <- as.data.frame(model.matrix(~ category - 1, data = df))
View(df_transformed)
View(df)
# Sample data frame with a column containing values from 1 to 150
set.seed(123)
df <- data.frame(category = sample(1:150, 10, replace = TRUE))  # A sample column with values from 1 to 150
# Use model.matrix to create a one-hot encoded matrix
df_transformed <- as.data.frame(model.matrix(~ category - 1, data = df))
# Print the transformed data frame
print(df)
print(df_transformed)
library(dplyr)
library(tidyr)
# Sample data frame with a column containing values from 1 to 150
set.seed(123)
df <- data.frame(id = 1:10, category = sample(1:150, 10, replace = TRUE))
# Transform the data to one-hot encoding using pivot_wider
df_transformed <- df %>%
mutate(value = 1) %>%
pivot_wider(names_from = category, values_from = value, values_fill = 0, names_prefix = "category_")
View(df_transformed)
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
category_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
category_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Transform all categorical columns to one-hot encoding
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),  # Select the columns to transform
names_to = "category_type",     # A temporary column to hold the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                        # Create a new column with the value '1' for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),
values_from = value,
values_fill = 0,
names_prefix = "") %>%
# Optionally, arrange or order columns
select(id, everything())
View(df)
View(df_transformed)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
category_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
category_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) %>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("category_1"), starts_with("category_2"))
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
category_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
category_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) %>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("category_1"), starts_with("category_2"))
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("category_1"), starts_with("category_2"))
View(df_transformed)
df_transformed2 <- df %>%
pivot_longer(cols = starts_with("category"),    # Convert category_1 and category_2 to long format
names_to = "category_type",       # Temporary column to hold the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Create a new column with the value '1' for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Add missing columns for all 150 values of category_1 and all 50 values of category_2
bind_cols(as_tibble(matrix(0, nrow = nrow(df), ncol = 150 - length(grep("^category_1_", names(.))))),
as_tibble(matrix(0, nrow = nrow(df), ncol = 50 - length(grep("^category_2_", names(.)))))) %>%
# Rename the added columns to match missing category_1 and category_2 values
rename_with(~paste0("category_1_", setdiff(1:150, unique(df$category_1))), starts_with("V1")) %>%
rename_with(~paste0("category_2_", setdiff(1:50, unique(df$category_2))), starts_with("V2")) %>%
# Ensure the columns are in the correct order (first category_1, then category_2)
select(id, starts_with("category_1_"), starts_with("category_2_"))
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
category_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
category_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("category_1"), starts_with("category_2"))
View(df_transformed)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
q_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
q_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("q_1"), starts_with("q_2"))
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
q_1 = sample(1:150, 10, replace = TRUE),  # First categorical column
q_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("q_"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("q_1"), starts_with("q_2"))
View(df_transformed)
set.seed(123)
df <- data.frame(
id = 1:50,                      # Identifier column
q1 = sample(1:150, 10, replace = TRUE),  # First categorical column
q2 = sample(1:50, 10, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("q"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("q1"), starts_with("q2"))
View(df)
View(df_transformed)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:50,                      # Identifier column
q1 = sample(1:150, 50, replace = TRUE),  # First categorical column
q2 = sample(1:50, 50, replace = TRUE)    # Second categorical column
)
# Create a one-hot encoded data frame ensuring all 150 values for category_1 and 50 for category_2 are included
df_transformed <- df %>%
pivot_longer(cols = starts_with("q"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),  # Spread categories into wide format
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Ensure that all columns from category_1 (1 to 150) and category_2 (1 to 50) are present
#complete(id, nesting(category_1 = 1:150, category_2 = 1:50), fill = list(value = 0)) #%>%
# Optionally order columns: First category_1 columns and then category_2 columns
select(id, starts_with("q1"), starts_with("q2"))
View(df_transformed)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Sample data frame with multiple columns (each containing categorical values)
set.seed(123)
df <- data.frame(
id = 1:10,                      # Identifier column
category_1 = sample(1:150, 10, replace = TRUE),  # First categorical column (1 to 150)
category_2 = sample(1:50, 10, replace = TRUE)    # Second categorical column (1 to 50)
)
# Manually create all possible combinations for category_1 (1 to 150) and category_2 (1 to 50)
all_category_1 <- as.character(1:150)  # Create a sequence of all possible values for category_1
all_category_2 <- as.character(1:50)   # Create a sequence of all possible values for category_2
# Transform the data into one-hot encoding for all possible values in category_1 and category_2
df_transformed <- df %>%
pivot_longer(cols = starts_with("category"),    # Transform category_1 and category_2 into long format
names_to = "category_type",       # Create a column for the original column names
values_to = "category_value") %>%
mutate(value = 1) %>%                          # Add a column with value 1 for one-hot encoding
pivot_wider(names_from = c(category_type, category_value),
values_from = value,
values_fill = 0,                   # Fill missing values with 0
names_prefix = "") %>%
# Create empty columns for all missing category_1 (1 to 150) and category_2 (1 to 50) combinations
bind_cols(as_tibble(matrix(0, nrow = nrow(df), ncol = 150 - length(grep("^category_1_", names(.))))),
as_tibble(matrix(0, nrow = nrow(df), ncol = 50 - length(grep("^category_2_", names(.)))))) %>%
# Rename missing columns for category_1 and category_2
rename_with(~paste0("category_1_", setdiff(1:150, unique(df$category_1))), starts_with("V1")) %>%
rename_with(~paste0("category_2_", setdiff(1:50, unique(df$category_2))), starts_with("V2")) %>%
# Select and order columns: first category_1 columns, then category_2 columns
select(id, paste0("category_1_", all_category_1), paste0("category_2_", all_category_2))
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv(file = filePath, sep = ",", dec = dec)
return(fileData)
}
baseFolder <- "source"
ToetsadviesC <- read_csv(file.path(SCC_folder, "XmlResultOsp.csv"), dec = ".")
baseFolder <- "source"
ToetsadviesC <- read_csv(file.path(baseFolder, "XmlResultOsp.csv"), dec = ".")
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv(file = filePath, sep = ",", dec = dec)
return(fileData)
}
scriptBaseFolder <- "bucuresti"
input <- read.csv(paste0(here(scriptBaseFolder), "/source/XmlResultOsp.csv"), sep = ",")
View(input)
colnames(input)
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv(file = filePath, sep = ",", dec = dec, check.names = FALSE)
return(fileData)
}
scriptBaseFolder <- "bucuresti"
input <- read.csv(paste0(here(scriptBaseFolder), "/source/XmlResultOsp.csv"), sep = ",")
colnames(input)
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv(file = filePath, sep = ",", dec = dec, check.names = FALSE)
return(fileData)
}
scriptBaseFolder <- "bucuresti"
input <- read.csv(paste0(here(scriptBaseFolder), "/source/XmlResultOsp.csv"), sep = ",")
View(input)
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv(file = filePath, sep = ",", dec = dec, check.names = FALSE, stringsAsFactors = FALSE, encoding = "UTF-8")
return(fileData)
}
scriptBaseFolder <- "bucuresti"
input <- read.csv(paste0(here(scriptBaseFolder), "/source/XmlResultOsp.csv"), sep = ",")
colnames(input)
library(here)
read_csv <- function(filePath, dec = ".") {
fileData <- read.csv2(file = filePath, sep = ",", dec = dec, check.names = FALSE, stringsAsFactors = FALSE, encoding = "UTF-8")
return(fileData)
}
scriptBaseFolder <- "bucuresti"
input <- read.csv(paste0(here(scriptBaseFolder), "/source/XmlResultOsp.csv"), sep = ",")
colnames(input)
